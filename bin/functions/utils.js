import * as _ from 'lodash';
export function isArrayOfObjects(value) {
    return _.isArray(value) && _.every(value, _.isObject);
}
export function keyIsPotentialId(arrayOfObjects, key) {
    const valuesOfKey = arrayOfObjects.map((obj) => obj[key]);
    return (isArrayOfStrings(valuesOfKey) &&
        _.uniq(valuesOfKey).length === arrayOfObjects.length);
}
export function isArrayOfStrings(value) {
    return _.isArray(value) && _.every(value, _.isString);
}
export function guessKeyWithUniqueValue(records) {
    const sampleRecord = records[0];
    const potentialKeys = _.mapValues(sampleRecord, (_1, key) => keyIsPotentialId(records, key));
    const key = _.findKey(potentialKeys);
    if (key === undefined) {
        throw new Error(`Could not guess record ID. Example record: ${JSON.stringify(sampleRecord)}`);
    }
    return key;
}
export function isArrayOfUnmergeables(arr) {
    return _.isArray(arr) && _.every(arr, isUnmergeable);
}
export function isUnmergeable(value) {
    return _.some([
        _.isString,
        _.isBoolean,
        _.isBuffer,
        _.isDate,
        _.isEmpty,
        _.isError,
        _.isFinite,
        _.isFunction,
        _.isInteger,
        _.isNaN,
        _.isNil,
        _.isNull,
        _.isNumber,
        _.isRegExp,
        _.isSymbol,
        _.isUndefined,
    ], fn => fn(value));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL21rL0NvZGUvZ2l0aHViL3dob2xlc29tZWRldi9leHRlbmQtY29uZmlnL3NyYy8iLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUU1QixNQUFNLDJCQUEyQixLQUFZO0lBQzNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsTUFBTSwyQkFBMkIsY0FBd0IsRUFBRSxHQUFXO0lBQ3BFLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRS9ELE1BQU0sQ0FBQyxDQUNMLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztRQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxjQUFjLENBQUMsTUFBTSxDQUNyRCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sMkJBQTJCLEtBQVk7SUFDM0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFFRCxNQUFNLGtDQUFrQyxPQUFpQjtJQUN2RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FDMUQsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUMvQixDQUFDO0lBRUYsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVyQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLElBQUksS0FBSyxDQUNiLDhDQUE4QyxJQUFJLENBQUMsU0FBUyxDQUMxRCxZQUFZLENBQ2IsRUFBRSxDQUNKLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLGdDQUFnQyxHQUFVO0lBQzlDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFFRCxNQUFNLHdCQUF3QixLQUFVO0lBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNYO1FBQ0UsQ0FBQyxDQUFDLFFBQVE7UUFDVixDQUFDLENBQUMsU0FBUztRQUNYLENBQUMsQ0FBQyxRQUFRO1FBQ1YsQ0FBQyxDQUFDLE1BQU07UUFDUixDQUFDLENBQUMsT0FBTztRQUNULENBQUMsQ0FBQyxPQUFPO1FBQ1QsQ0FBQyxDQUFDLFFBQVE7UUFDVixDQUFDLENBQUMsVUFBVTtRQUNaLENBQUMsQ0FBQyxTQUFTO1FBQ1gsQ0FBQyxDQUFDLEtBQUs7UUFDUCxDQUFDLENBQUMsS0FBSztRQUNQLENBQUMsQ0FBQyxNQUFNO1FBQ1IsQ0FBQyxDQUFDLFFBQVE7UUFDVixDQUFDLENBQUMsUUFBUTtRQUNWLENBQUMsQ0FBQyxRQUFRO1FBQ1YsQ0FBQyxDQUFDLFdBQVc7S0FDZCxFQUNELEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUNoQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlPZk9iamVjdHModmFsdWU6IGFueVtdKTogdmFsdWUgaXMgb2JqZWN0W10ge1xuICByZXR1cm4gXy5pc0FycmF5KHZhbHVlKSAmJiBfLmV2ZXJ5KHZhbHVlLCBfLmlzT2JqZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleUlzUG90ZW50aWFsSWQoYXJyYXlPZk9iamVjdHM6IG9iamVjdFtdLCBrZXk6IHN0cmluZykge1xuICBjb25zdCB2YWx1ZXNPZktleSA9IGFycmF5T2ZPYmplY3RzLm1hcCgob2JqOiBhbnkpID0+IG9ialtrZXldKTtcblxuICByZXR1cm4gKFxuICAgIGlzQXJyYXlPZlN0cmluZ3ModmFsdWVzT2ZLZXkpICYmXG4gICAgXy51bmlxKHZhbHVlc09mS2V5KS5sZW5ndGggPT09IGFycmF5T2ZPYmplY3RzLmxlbmd0aFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheU9mU3RyaW5ncyh2YWx1ZTogYW55W10pOiB2YWx1ZSBpcyBzdHJpbmdbXSB7XG4gIHJldHVybiBfLmlzQXJyYXkodmFsdWUpICYmIF8uZXZlcnkodmFsdWUsIF8uaXNTdHJpbmcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3Vlc3NLZXlXaXRoVW5pcXVlVmFsdWUocmVjb3Jkczogb2JqZWN0W10pIHtcbiAgY29uc3Qgc2FtcGxlUmVjb3JkID0gcmVjb3Jkc1swXTtcbiAgY29uc3QgcG90ZW50aWFsS2V5cyA9IF8ubWFwVmFsdWVzKHNhbXBsZVJlY29yZCwgKF8xLCBrZXkpID0+XG4gICAga2V5SXNQb3RlbnRpYWxJZChyZWNvcmRzLCBrZXkpLFxuICApO1xuXG4gIGNvbnN0IGtleSA9IF8uZmluZEtleShwb3RlbnRpYWxLZXlzKTtcblxuICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQ291bGQgbm90IGd1ZXNzIHJlY29yZCBJRC4gRXhhbXBsZSByZWNvcmQ6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIHNhbXBsZVJlY29yZCxcbiAgICAgICl9YCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlPZlVubWVyZ2VhYmxlcyhhcnI6IGFueVtdKSB7XG4gIHJldHVybiBfLmlzQXJyYXkoYXJyKSAmJiBfLmV2ZXJ5KGFyciwgaXNVbm1lcmdlYWJsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VubWVyZ2VhYmxlKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIF8uc29tZShcbiAgICBbXG4gICAgICBfLmlzU3RyaW5nLFxuICAgICAgXy5pc0Jvb2xlYW4sXG4gICAgICBfLmlzQnVmZmVyLFxuICAgICAgXy5pc0RhdGUsXG4gICAgICBfLmlzRW1wdHksXG4gICAgICBfLmlzRXJyb3IsXG4gICAgICBfLmlzRmluaXRlLFxuICAgICAgXy5pc0Z1bmN0aW9uLFxuICAgICAgXy5pc0ludGVnZXIsXG4gICAgICBfLmlzTmFOLFxuICAgICAgXy5pc05pbCxcbiAgICAgIF8uaXNOdWxsLFxuICAgICAgXy5pc051bWJlcixcbiAgICAgIF8uaXNSZWdFeHAsXG4gICAgICBfLmlzU3ltYm9sLFxuICAgICAgXy5pc1VuZGVmaW5lZCxcbiAgICBdLFxuICAgIGZuID0+IGZuKHZhbHVlKSxcbiAgKTtcbn1cbiJdfQ==